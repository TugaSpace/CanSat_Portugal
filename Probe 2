

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <DFRobot_BMP3XX.h>


#include <esp_now.h>
#include <WiFi.h>

const float altitudeInicial = 115;
const long interval = 250;
int previousMillis;
DFRobot_BMP388_I2C bmp388(&Wire, bmp388.eSDOVDD);
//estruturas
typedef struct sonda {
  int id;
  float pressao;
  float milliseconds;
} sonda;
// REPLACE WITH THE RECEIVER'S MAC Address
uint8_t broadcastAddress[] = { 0x40, 0x22, 0xD8, 0x05, 0xA7, 0x48 };
//40:22:D8:05:A7:48


esp_now_peer_info_t peerInfo;


sonda myData;
// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  // Serial.print("\r\nLast Packet Send Status:\t");
  // Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup() {
  Serial.begin(9600);
  Wire.begin();

  bool status;
  //inicia bmp1
  if (bmp388.begin() == 0) {
    //hardwareCheck.sensorPressao1Check = true;
  } else {
    //  hardwareCheck.sensorPressao1Check = false;
  }
  bmp388.setSamplingMode(bmp388.eUltraPrecision);
  bmp388.calibratedAbsoluteDifference(altitudeInicial);
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);

  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
}


void loop() {

  unsigned long currentMillis = millis();
 if (currentMillis - previousMillis >= interval) {
   previousMillis = currentMillis;
  myData.id = 2;
  myData.pressao = bmp388.readPressPa();
  Serial.println(myData.pressao);
  myData.milliseconds = millis();
  Serial.println(myData.milliseconds);
  Serial.println(bmp388.readAltitudeM());


  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

  if (result == ESP_OK) {
    Serial.println("Sent with success");
  } else {
    Serial.println("Error sending the data");
  }
 }
}
